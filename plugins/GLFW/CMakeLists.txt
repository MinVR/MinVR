project(MinVR_GLFW)

set (SOURCEFILES 
  ${CMAKE_SOURCE_DIR}/third-party/GLEW/glew.c
  src/VRGLFWInputDevice.cpp
  src/VRGLFWPlugin.cpp
  src/VRGLFWWindowToolkit.cpp
)

set (HEADERFILES
  src/VRGLFWInputDevice.h
  src/VRGLFWWindowToolkit.h
)

source_group("Header Files" FILES ${HEADERFILES})

#------------------------------------------
# Download dependencies
#------------------------------------------

set(glfw_checkout_Dir ${PROJECT_SOURCE_DIR}/deps/glfw)
make_directory(${glfw_checkout_Dir})
include(ExternalProject)

set(glfw_build_dir ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/glfw)
set(glfw_stamp_dir ${glfw_build_dir}/stamp)
set(glfw_tmp_dir ${glfw_build_dir}/tmp)

set(glfw_PREFIX "${glfw_checkout_Dir}")

make_directory(${CMAKE_INSTALL_PREFIX}/ext/glfw)
set(glfw_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/ext/glfw)

set(glfw_CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${glfw_INSTALL_DIR} -DUSE_MSVC_RUNTIME_LIBRARY_DLL=ON -DGLFW_BUILD_DOCS=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
set(glfw_DIR "${glfw_INSTALL_DIR}")

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	set(glfw_CMAKE_ARGS ${glfw_CMAKE_ARGS} -DCMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD="c++11" -DCMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY="libc++")
endif()
   
ExternalProject_add(glfw
		PREFIX ${glfw_PREFIX}
		GIT_REPOSITORY https://github.com/ivlab/glfw.git
		GIT_TAG gpu-affinity
		INSTALL_DIR ${glfw_INSTALL_DIR}
		CMAKE_ARGS ${glfw_CMAKE_ARGS}
		UPDATE_COMMAND ""
		DOWNLOAD_DIR ${glfw_checkout_Dir}
		SOURCE_DIR ${glfw_checkout_Dir}
		TMP_DIR ${glfw_tmp_dir}
		STAMP_DIR ${glfw_stamp_dir}
		BINARY_DIR ${glfw_build_dir}
    )

  message(STATUS "Building GLFW from: ${glfw_PREFIX}.")
  message(STATUS "Installing GLFW to: ${glfw_INSTALL_DIR}.")
 
#set_property(TARGET glfw PROPERTY FOLDER "Dependencies")

set(GLFW_INCLUDE_DIR ${glfw_INSTALL_DIR}/include CACHE INTERNAL "Directory of GLFW header files")
if(MSVC)
	set(GLFW_LIBRARY ${glfw_INSTALL_DIR}/lib/glfw3.lib CACHE INTERNAL "GLFW lib file")
else()
	set(GLFW_LIBRARY ${glfw_INSTALL_DIR}/lib/libglfw3.a CACHE INTERNAL "GLFW lib file")
endif()	
include_directories(${GLFW_INCLUDE_DIR})

message(STATUS "GLFW includes: " ${GLFW_INCLUDE_DIR})
message(STATUS "GLFW Library: " ${GLFW_LIBRARY})

# OpenGL
find_package(OpenGL REQUIRED)
set(OPENGL_LIBRARIES ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})
set(OPENGL_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})
include_directories(${OPENGL_INCLUDE_DIRS})

#------------------------------------------
# MinVR Dependencies
#------------------------------------------

include_directories(
	${CMAKE_SOURCE_DIR}/third-party/GLEW
)

link_directories(${CMAKE_BINARY_DIR}/lib)

#------------------------------------------
# Include Directories
#------------------------------------------

# Include Directories
include_directories (
  ${vr_src_dir}
  src
  deps/glfw/include
)

#------------------------------------------
# Specific preprocessor defines
#------------------------------------------

# Windows Section #
if (MSVC)
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
endif()

#------------------------------------------
# Set output directories to lib, and bin
#------------------------------------------

set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/lib)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/lib)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/bin)
foreach (CONF ${CMAKE_CONFIGURATION_TYPES})
	string (TOUPPER ${CONF} CONF)
	set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONF} ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/bin)
	set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONF} ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/lib)
	set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONF} ${CMAKE_BINARY_DIR}/plugins/${PROJECT_NAME}/lib)
endforeach(CONF CMAKE_CONFIGURATION_TYPES)


#------------------------------------------
# Build Target
#------------------------------------------

#add_definitions(-DPLUGINPATH="${CMAKE_BINARY_DIR}/plugins")
#add_executable ( test_glfw test/test.cpp )
#target_link_libraries(test_glfw ${OPENGL_LIBRARIES} MinVR ${LIBS_ALL})

SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${PROJECT_NAME}/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

add_library ( ${PROJECT_NAME} SHARED ${HEADERFILES} ${SOURCEFILES} )
target_link_libraries(${PROJECT_NAME} ${GLFW_LIBRARY} ${OPENGL_LIBRARIES} MinVR ${LIBS_ALL})
add_dependencies( ${PROJECT_NAME} glfw)

#------------------------------------------
# Install Target
#------------------------------------------

install( TARGETS ${PROJECT_NAME}
         LIBRARY DESTINATION ${VRPlugins_install_dir}/${PROJECT_NAME}/lib
         ARCHIVE DESTINATION ${VRPlugins_install_dir}/${PROJECT_NAME}/lib
         RUNTIME DESTINATION ${VRPlugins_install_dir}/${PROJECT_NAME}/bin)

set_property(TARGET MinVR_GLFW PROPERTY FOLDER "plugins")
set_property(TARGET glfw PROPERTY FOLDER "plugins/dependencies/libGLFW")
