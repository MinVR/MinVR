# Template for creating a CMakeLists.txt for new plugins -- copy this, replace XXX and YYY, 
# and follow the example of how OpenGL/GLEW are handled below if you need your plugin to 
# link with an external library.
# -----------------------------------------------------------------------------------------

# This file is part of the MinVR cmake build system.  
# See the main MinVR/CMakeLists.txt file for authors, copyright, and license info.
#
# Builds the MinVR_XXX plugin as a shared library.

# Note: This CMakeLists.txt is not intended to work on its own.  It inherits many settings 
# from the root CMakeLists.txt (build and install directories, compiling flags, #defines, etc.)


# Plugin names must begin with "MinVR_"
project(MinVR_VTK)


# Source:
set (SOURCEFILES 
  src/VRVTKPlugin.cpp
  src/VRVTKApp.cpp
)
set (HEADERFILES
  src/VRVTKApp.h
)

find_path(VTK_INCLUDE REQUIRED
	NAMES
	ExternalVTKWidget.h
	vtkExternalOpenGLCamera.h
	HINTS
	"${VTK_INCLUDE_DIRS}"
	ENV CPATH # For OSCAR modules at Brown/CCV
	)

#gainput name must be out of the path


find_library(VTK_LIBRARY REQUIRED
	NAMES
	vtkCommonCore
	vtkRenderingExternal
	vtkRenderingCore
	HINTS
    ${VTK_LIBRARIES}
	ENV LIBRARY_PATH # For OSCAR modules at Brown/CCV
	)

message(STATUS "VTK_LIBRARY is in ${VTK_LIBRARY}")

# Define the target
add_library(${PROJECT_NAME} SHARED ${HEADERFILES} ${SOURCEFILES})

target_include_directories(${PROJECT_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>                  # for headers when building
    $<INSTALL_INTERFACE:${INSTALL_PLUGININCLUDE_DEST}/${PROJECT_NAME}>  # for client in install mode
	${VTK_INCLUDE}
)


# Setup dependency on libMinVR:
target_include_directories(${PROJECT_NAME} PUBLIC 
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../src>  # for headers when building
	
    $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DEST}>              # for client in install mode
	
)
target_link_libraries(${PROJECT_NAME} PUBLIC MinVR)

target_link_libraries(${PROJECT_NAME} 
                     PUBLIC debug  ${VTK_LIBRARY}/vtkCommonCored.lib
                     PUBLIC debug  ${VTK_LIBRARY}/vtkRenderingExternald.lib
                     PUBLIC debug ${VTK_LIBRARY}/vtkRenderingCored.lib
)
		
target_link_libraries(${PROJECT_NAME} 
            PUBLIC optimized ${VTK_LIBRARY}/vtkCommonCore.lib 
			PUBLIC optimized ${VTK_LIBRARY}/vtkRenderingExternal.lib 
			PUBLIC optimized ${VTK_LIBRARY}/vtkRenderingCore.lib
)


# Setup dependency on OpenGL:
include(AutoBuildOpenGL)
AutoBuild_use_package_OpenGL(${PROJECT_NAME} PUBLIC)


# Setup dependency on GLEW (only needed on Windows):
if (WIN32)
  include(AutoBuildGLEW)
  AutoBuild_use_package_GLEW(${PROJECT_NAME} PUBLIC)
endif()


# Installation:
install(TARGETS ${PROJECT_NAME} EXPORT MinVRTargets COMPONENT ${PROJECT_NAME}
    LIBRARY DESTINATION ${INSTALL_PLUGINLIB_DEST}
    ARCHIVE DESTINATION ${INSTALL_PLUGINLIB_DEST}
    RUNTIME DESTINATION ${INSTALL_PLUGINDLL_DEST}
)
install(FILES ${HEADERFILES} DESTINATION ${INSTALL_PLUGININCLUDE_DEST}/${PROJECT_NAME} COMPONENT ${PROJECT_NAME})


# For better organization when using an IDE with folder structures:
source_group("Header Files" FILES ${HEADERFILES})
set_property(TARGET ${PROJECT_NAME} PROPERTY FOLDER "plugins")
